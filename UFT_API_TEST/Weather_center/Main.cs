/***************************************************************
    *  DO NOT EDIT THIS FILE!
    *         
    *  This file is automatically generated by HP Service Test.
    *  Manually changing the contents of this file may result in 
    *  loss of information.
    *          
    *  To edit the test, open the file ‘Weather_center.st’ 
    *  in HP Service Test.
     ***************************************************************/
    
    namespace Script
    {
    using System;
    using System.Text;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using HP.ST.Fwk.ReporterFWK;
    using HP.ST.Shared.Utilities;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Fwk.RunTimeFWK.HelperClasses;
    using HP.ST.Fwk.RunTimeFWK.CompositeActivities;
    using HP.ST.Ext.BindingImpl.Setters.DataSourceSetters;
    using HP.ST.Fwk.JVMLoader;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using HP.ST.Fwk.SOAReplayAPI;
    using HP.ST.Fwk.UFTLicensing;
    
    
    
    public partial class WorkFlowScript : STWorkFlowScriptBase
    {    
    	TestUserCode _userCode = null;
    	TestEntities _flow = null;
    	static Reporter reporter;
    	int reportLevelInTree;
        HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator reportCreator;
    	
    	public BindDirection bind_dir87 = null;
        public BindDirection bind_dir88 = null;
        
        public IEnumerable<FeaturesGroup> LicensedFeatures
        {
        
        get
        {
        List<FeaturesGroup> features = new List<FeaturesGroup>();
        return features;
        
        }
        
        }
        
        public WorkFlowScript()
            : base(VuserClass.CommandLineArguments, new STRunTimeContext(), "test")
        {	
        	UpdateContextWithActionFolder(String.Empty);
        	
        }
        
        public WorkFlowScript(ISTRunTimeContext ctx)
            : base(VuserClass.CommandLineArguments, ctx, "test")
            
        {
        	this._context = ctx;
        	UpdateContextWithActionFolder(String.Empty);
        	UpdateTestSettings(ctx);
        }
        
        internal void InitializeComponent()
        {
        	LoadInput();
        	
        	InitReport();
        	
        	InitializeEncryptionManagerValues();
        
        	_userCode = new TestUserCode();
            _flow = _userCode;
            _flow.Context=this._context;
            
            
        
        	_flow.DataFetchActivity29 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity29");
            _flow.StartActivity1 = new HP.ST.Ext.BasicActivities.StartActivity(_context,"StartActivity1");
            _flow.Loop2 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop2Input>(_context,"Loop2",LoopType.For);
            _flow.DataExporterActivity31 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity31");
            _flow.DataExporterCloseActivity32 = new HP.ST.Ext.BasicActivities.DataExporterCloseActivity(_context,"DataExporterCloseActivity32");
            _flow.EndActivity3 = new HP.ST.Ext.BasicActivities.EndActivity(_context,"EndActivity3");
            _flow.DataDisconnectActivity30 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity30");
            _flow.Sequence28 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence28");
            _flow.FileWriteActivity27 = new HP.ST.Ext.BasicActivities.FileWriteActivity(_context,"FileWriteActivity27");
            _flow.FolderListContentActivity26 = new HP.ST.Ext.BasicActivities.FolderListContentActivity(_context,"FolderListContentActivity26");
            _flow.DataFetchActivity29.Comment = @"";
            _flow.DataFetchActivity29.IconPath = @"";
            _flow.DataFetchActivity29.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity29.QueryClassName = @"HP.ST.Ext.CustomDataProviders.LocalDataQuery";
            XmlDocument DataFetchActivity29_QueryParameters_Document = new XmlDocument();
            DataFetchActivity29_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity29Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>db9abdd6-f19e-4d17-91af-85c33a60b368</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>Flight</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>TableStructure</Name><Value>Date,Date,</Value></QueryParameter><QueryParameter><Name>TableContents</Name><Value>22-Sep-16 12:00:00 AM</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity29_QueryParameters_Document.LoadXml(xmlDataFetchActivity29Params);
            _flow.DataFetchActivity29.QueryParameters = DataFetchActivity29_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("Flight", _flow.DataFetchActivity29);
            this.Activities.Add (_flow.DataFetchActivity29);
            _flow.StartActivity1.Comment = @"";
            _flow.StartActivity1.IconPath = @"C:\Program Files (x86)\Hp\Unified Functional Testing\AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.StartActivity1.Name = @"Start";
            _flow.StartActivity1.JVM = new HP.ST.Ext.BasicActivities.JVMProperties();
            _flow.StartActivity1.IsJavaUsed = false;
            _flow.StartActivity1.JVM.Classpath = @"%CLASSPATH%";
            _flow.StartActivity1.JVM.AdditionalVMParameters = @"";
            _flow.StartActivity1.JMS = new HP.ST.Ext.BasicActivities.JMSProperties();
            _flow.StartActivity1.IsJmsUsed = false;
            _flow.StartActivity1.JMS.JNDIContextFactory = @"<Select...>";
            _flow.StartActivity1.JMS.JNDIProviderUrl = @"";
            _flow.StartActivity1.JMS.JMSConnectionFactory = @"";
            _flow.StartActivity1.JMS.SecurityPrincipal = @"";
            _flow.StartActivity1.JMS.SecurityCredentials = @"";
            _flow.StartActivity1.JMS.ConnectionsPerProcess = @"1";
            _flow.StartActivity1.JMS.TimeoutOptions = @"DN_User_defined_Timeout";
            _flow.StartActivity1.JMS.UserTimeout = @"20";
            _flow.StartActivity1.JMS.GenerateAutoSelector = @"No";
            this.Activities.Add (_flow.StartActivity1);
            _flow.Loop2.ConditionAsString = @"Run for 0 iterations";
            _flow.Loop2.NumberOfIterations = (int)0;
            _flow.Loop2.Comment = @"";
            _flow.Loop2.IconPath = @"C:\Program Files (x86)\Hp\Unified Functional Testing\AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop2.Name = @"Test Flow";
            _flow.Loop2.Activities.Add (_flow.Sequence28);
            this.Activities.Add (_flow.Loop2);
            _flow.DataExporterActivity31.Comment = @"";
            _flow.DataExporterActivity31.IconPath = @"";
            VTDPropertyInfoBase pi187 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter101 = new VTDObjectGetter(pi187);
            VTDPropertyInfoBase pi188 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter87 = new VTDObjectSetter(pi188);
            binding_setter87 = new StringFormaterDecorator(binding_setter87,"{Step.DataFetchActivity29.OutTable}");
            bind_dir87 = new BindDirection(_flow.DataFetchActivity29,binding_getter101,binding_setter87,BindTargetType.ToInProperty);
            _flow.DataExporterActivity31.InDirections.Add(bind_dir87);
            this.Activities.Add (_flow.DataExporterActivity31);
            _flow.DataExporterCloseActivity32.Comment = @"";
            _flow.DataExporterCloseActivity32.IconPath = @"";
            this.Activities.Add (_flow.DataExporterCloseActivity32);
            _flow.EndActivity3.Comment = @"";
            _flow.EndActivity3.IconPath = @"C:\Program Files (x86)\Hp\Unified Functional Testing\AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.EndActivity3.Name = @"End";
            this.Activities.Add (_flow.EndActivity3);
            _flow.DataDisconnectActivity30.Comment = @"";
            _flow.DataDisconnectActivity30.IconPath = @"";
            VTDPropertyInfoBase pi189 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter102 = new VTDObjectGetter(pi189);
            VTDPropertyInfoBase pi190 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter88 = new VTDObjectSetter(pi190);
            binding_setter88 = new StringFormaterDecorator(binding_setter88,"{Step.DataFetchActivity29.OutTable}");
            bind_dir88 = new BindDirection(_flow.DataFetchActivity29,binding_getter102,binding_setter88,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity30.InDirections.Add(bind_dir88);
            this.Activities.Add (_flow.DataDisconnectActivity30);
            _flow.Sequence28.Comment = @"";
            _flow.Sequence28.IconPath = @"";
            _flow.Sequence28.Name = @"Sequence28";
            _flow.Sequence28.Activities.Add (_flow.FileWriteActivity27);
            _flow.Sequence28.Activities.Add (_flow.FolderListContentActivity26);
            _flow.FileWriteActivity27.Content = @"sourabh";
            _flow.FileWriteActivity27.FilePath = @"C:\Users\Yogesh\Desktop\Order\Order_num";
            _flow.FileWriteActivity27.Mode = @"Append";
            _flow.FileWriteActivity27.Encoding = @"ASCII";
            _flow.FileWriteActivity27.AppendNewLine = false;
            _flow.FileWriteActivity27.Comment = @"";
            _flow.FileWriteActivity27.IconPath = @"C:\Program Files (x86)\Hp\Unified Functional Testing\AddIns\ServiceTest\BasicActivities\toolbox_filewrite.png";
            _flow.FileWriteActivity27.Name = @"Write to File27";
            _flow.FolderListContentActivity26.FolderSourcePath = @"C:\Users\Yogesh\Desktop\Order";
            _flow.FolderListContentActivity26.SearchPattern = @"Order_num";
            _flow.FolderListContentActivity26.ContentType = @"Files";
            _flow.FolderListContentActivity26.SortingBy = @"None";
            _flow.FolderListContentActivity26.SortingType = @"Ascending";
            _flow.FolderListContentActivity26.IncludeSubFolders = false;
            _flow.FolderListContentActivity26.Comment = @"";
            _flow.FolderListContentActivity26.IconPath = @"C:\Program Files (x86)\Hp\Unified Functional Testing\AddIns\ServiceTest\BasicActivities\ictb_Folder_List_filter_16.png";
            _flow.FolderListContentActivity26.Name = @"Get Folder Content26";
            XmlDocument FolderListContentActivity26_ExpectedOutputProperties_Document = new XmlDocument();
            FolderListContentActivity26_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            FolderListContentActivity26_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments />");
            _flow.FolderListContentActivity26.ExpectedOutputProperties = FolderListContentActivity26_ExpectedOutputProperties_Document;
            
        }
        
        internal void InitializeEncryptionManagerValues()
        {
        
        }
        	
    	bool useReport = true;
    
    	protected override STExecutionResult ExecuteStep()
        {
            return base.ExecuteStep();
        }
    
        public void Start()
        {
    	    try
    		{
    		  Workflow_Executing();
    		  this.ExecuteStep();
    		}
    		finally
    		{
    		  WorkFlowScript_Completed();
    		}
        }
    
    	private void InitReport()
    	{
    		if (useReport)
    		{	
    			// Intialize Reporter
    			string reportDBDir = Path.Combine(this._context.ReportDirectory, @"Report");
    			CleanupReport(reportDBDir);        	
    			string reportDBPath = Path.Combine(reportDBDir, "VTDReport.mdb");        	
    			if (reporter == null)
    			{
    				reporter = new Reporter(reportDBPath);
    			}
    			_context.Reporter = reporter;
    		}
    	}
    
        public static void CopyDirectory(string Src, string Dst)
        {
            String[] Files;
    
            if (Dst[Dst.Length - 1] != Path.DirectorySeparatorChar)
                Dst += Path.DirectorySeparatorChar;
            if (!Directory.Exists(Dst)) Directory.CreateDirectory(Dst);
            Files = Directory.GetFileSystemEntries(Src);
            foreach (string Element in Files)
            {
                // Sub directories
                if (Directory.Exists(Element))
                    CopyDirectory(Element, Dst + Path.GetFileName(Element));
                // Files in directory
                else
                    File.Copy(Element, Dst + Path.GetFileName(Element), true);
            }
        }
        
        private void CleanupReport(string reportDBDir)
        {   
    		if (useReport)
    		{             
    			string reportTemplateDir = Path.Combine(ServiceTestRunner.GetInstallPath(),@"bin\ReportResources");                
    			try
    			{
            		CopyDirectory(reportTemplateDir, reportDBDir);
    			}
    			catch //(Exception ex)
    			{
    				//ToDo: LoggingService.Warn("Report Cleanup Error", ex);
    			}
    		}
        }
    
        void Workflow_Executing()
        {   
        	InitReportNode();
                       
        }
    
    	private void InitReportNode()
    	{
    		if (useReport)
    		{	
        		// Init report creator
    			this.reportCreator = new HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator();
    			this.reportLevelInTree = reportCreator.Init(_context.EnvironmentProfile.GetVariableValue("TestName"), _context);
                
    			STActivityBase activity = this;
    			string workflowID = activity.GetHashCode().ToString();
    			ReportNodeCreationData newNodeData =
    			new ReportNodeCreationData(workflowID, workflowID, DateTime.Now);
    			reporter.CreateReportNode(newNodeData);
            
    			ReportInfoData newReportData = new ReportInfoData(workflowID, ReportKeywords.TypeKeywordTag, this.GetType().ToString());
    			reporter.SendReportData(newReportData);
    			newReportData = new ReportInfoData(workflowID, ReportKeywords.NameKeywordTag, this.Name);
    			//TrackData(ReportInfoData.InfoDataTag, newReportData);
    			reporter.SendReportData(newReportData);            
            }
    	}
        
        void WorkFlowScript_Completed()
        {   
    		
    
    		CreateReportFiles();
    					
        	// Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
    
    		OnExecutionCompleted();
    		
        }
    
    	private void CreateReportFiles()
    	{
    		if (useReport)
    		{	
    			//Dispose reporter inorder to close connection to report DB
           		this._context.Reporter.Dispose();
            	
           		// Run report creator
    			reportCreator.RunOnDBAndCreateFiles();
    		}
    	}
    
        
        void Workflow_Faulting()
        {
    		
    
    		CreateReportFiles();
            // Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
           
    		OnExecutionCompleted();
        }
    
    	protected override QcSystemVariables GetRuntimeQcVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeQcVariables(this._context);
    	}
            
    	protected override TestSystemVariables GetTestSystemVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeTestVariables(this._context);
    	}
    
    	private void UpdateTestSettings(ISTRunTimeContext ctx)
        {
    		ctx.PropertyBag["StopTestOnStepFailure"] = true;
    	}
    }
    
    public partial class VuserClass
    {
    	public static string[] CommandLineArguments;
    	public static string[] DotNetResolverPaths;
    	
        public VuserClass()
        {
    				
    		AssemblyResolver.AddSTPathsToResolutionPaths();
    		AssemblyResolver.AttachToAppdomain();
        }
    
        private void AddAssemblyResolver()
        {
    		AssemblyResolver.AddTestPathToResolutionPaths(GetTestPath());
    		AssemblyResolver.AddPathsForAssemblyResolution(DotNetResolverPaths);
        }
    	
        public int STAction()
        {	
            AddAssemblyResolver();
            STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
            WorkFlowScript script = new WorkFlowScript(ctx);
            script.InitializeComponent();
            script.Start();       
            
            return 0;
        }
        
        public void NotifyLicenseException(string msg)
        {
        		
    		try
    		{
    		    STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
                WorkFlowScript script = new WorkFlowScript(ctx);
                script.InitializeComponent();
                script.Context.ReplayClient.OnLicenseFailure(msg);
                
            }
            catch (Exception)
            {
    			// ToDo: log the error message
            }        
        }
    
    	 protected string GetTestPath()
            {
                if (CommandLineArguments != null)
                {
                    for (int i = 0; i < CommandLineArguments.Length; i++)
                    {
                        if (CommandLineArguments[i].Equals("-test", StringComparison.OrdinalIgnoreCase))
                        {
                            return CommandLineArguments[i + 1];
                        }
                    }
                }
                return String.Empty;
            }
        
    }
    
    }
    