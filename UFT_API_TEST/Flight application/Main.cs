/***************************************************************
    *  DO NOT EDIT THIS FILE!
    *         
    *  This file is automatically generated by HP Service Test.
    *  Manually changing the contents of this file may result in 
    *  loss of information.
    *          
    *  To edit the test, open the file ‘Flight application.st’ 
    *  in HP Service Test.
     ***************************************************************/
    
    namespace Script
    {
    using System;
    using System.Text;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using HP.ST.Fwk.ReporterFWK;
    using HP.ST.Shared.Utilities;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Fwk.RunTimeFWK.HelperClasses;
    using HP.ST.Fwk.RunTimeFWK.CompositeActivities;
    using HP.ST.Ext.BindingImpl.Setters.DataSourceSetters;
    using HP.ST.Fwk.JVMLoader;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using HP.ST.Fwk.SOAReplayAPI;
    using HP.ST.Fwk.UFTLicensing;
    
    
    
    public partial class WorkFlowScript : STWorkFlowScriptBase
    {    
    	TestUserCode _userCode = null;
    	TestEntities _flow = null;
    	static Reporter reporter;
    	int reportLevelInTree;
        HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator reportCreator;
    	
    	public BindDirection bind_dir1 = null;
        public BindDirection bind_dir2 = null;
        public BindDirection bind_dir3 = null;
        public BindDirection bind_dir4 = null;
        public BindDirection bind_dir5 = null;
        public BindDirection bind_dir6 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity77 = null;
        public BindDirection bind_dir7 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity77_Policy = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity78 = null;
        public BindDirection bind_dir8 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity78_Policy = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity79 = null;
        public BindDirection bind_dir9 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity79_Policy = null;
        public BindDirection bind_dir10 = null;
        public BindDirection bind_dir11 = null;
        public BindDirection bind_dir12 = null;
        public BindDirection bind_dir13 = null;
        public BindDirection bind_dir14 = null;
        public BindDirection bind_dir15 = null;
        public BindDirection bind_dir16 = null;
        public BindDirection bind_dir17 = null;
        public BindDirection bind_dir18 = null;
        public BindDirection bind_dir19 = null;
        public BindDirection bind_dir20 = null;
        public BindDirection bind_dir21 = null;
        public BindDirection bind_dir22 = null;
        public BindDirection bind_dir23 = null;
        public BindDirection bind_dir24 = null;
        public BindDirection bind_dir25 = null;
        public BindDirection bind_dir26 = null;
        public BindDirection bind_dir27 = null;
        
        public IEnumerable<FeaturesGroup> LicensedFeatures
        {
        
        get
        {
        List<FeaturesGroup> features = new List<FeaturesGroup>();
        return features;
        
        }
        
        }
        
        public WorkFlowScript()
            : base(VuserClass.CommandLineArguments, new STRunTimeContext(), "test")
        {	
        	UpdateContextWithActionFolder(String.Empty);
        	
        }
        
        public WorkFlowScript(ISTRunTimeContext ctx)
            : base(VuserClass.CommandLineArguments, ctx, "test")
            
        {
        	this._context = ctx;
        	UpdateContextWithActionFolder(String.Empty);
        	UpdateTestSettings(ctx);
        }
        
        internal void InitializeComponent()
        {
        	LoadInput();
        	
        	InitReport();
        	
        	InitializeEncryptionManagerValues();
        
        	_userCode = new TestUserCode();
            _flow = _userCode;
            _flow.Context=this._context;
            
            
        
        	_flow.DataFetchActivity73 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity73");
            _flow.DataFetchActivity70 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity70");
            _flow.DataFetchActivity67 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity67");
            _flow.StartActivity1 = new HP.ST.Ext.BasicActivities.StartActivity(_context,"StartActivity1");
            _flow.Loop2 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop2Input>(_context,"Loop2",LoopType.For);
            _flow.DataExporterActivity69 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity69");
            _flow.DataExporterActivity72 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity72");
            _flow.DataExporterActivity75 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity75");
            _flow.DataExporterCloseActivity76 = new HP.ST.Ext.BasicActivities.DataExporterCloseActivity(_context,"DataExporterCloseActivity76");
            _flow.EndActivity3 = new HP.ST.Ext.BasicActivities.EndActivity(_context,"EndActivity3");
            _flow.DataDisconnectActivity68 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity68");
            _flow.DataDisconnectActivity71 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity71");
            _flow.DataDisconnectActivity74 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity74");
            this.DataCursorActivity77 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity77");
            this.DataCursorActivity77_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            this.DataCursorActivity78 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity78");
            this.DataCursorActivity78_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            this.DataCursorActivity79 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity79");
            this.DataCursorActivity79_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence66 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence66");
            _flow.StServiceCallActivity10 = new HP.ST.Ext.WebServicesActivities.StServiceCallActivity(_context,"StServiceCallActivity10");
            _flow.StServiceCallActivity12 = new HP.ST.Ext.WebServicesActivities.StServiceCallActivity(_context,"StServiceCallActivity12");
            _flow.FileExistsActivity33 = new HP.ST.Ext.BasicActivities.FileExistsActivity(_context,"FileExistsActivity33");
            _flow.IfElse29 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElse<IfElse29Input>(_context,"IfElse29");
            _flow.ReportMessageActivity42 = new HP.ST.Ext.BasicActivities.ReportMessageActivity(_context,"ReportMessageActivity42");
            _flow.FileWriteActivity47 = new HP.ST.Ext.BasicActivities.FileWriteActivity(_context,"FileWriteActivity47");
            _flow.StServiceCallActivity17 = new HP.ST.Ext.WebServicesActivities.StServiceCallActivity(_context,"StServiceCallActivity17");
            _flow.IfElse21 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElse<IfElse21Input>(_context,"IfElse21");
            _flow.ReportMessageActivity41 = new HP.ST.Ext.BasicActivities.ReportMessageActivity(_context,"ReportMessageActivity41");
            _flow.FileWriteActivity52 = new HP.ST.Ext.BasicActivities.FileWriteActivity(_context,"FileWriteActivity52");
            _flow.FileWriteActivity60 = new HP.ST.Ext.BasicActivities.FileWriteActivity(_context,"FileWriteActivity60");
            _flow.IfElseBranch30 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch30");
            _flow.IfElseBranch31 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch31");
            _flow.IfElseBranch22 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch22");
            _flow.IfElseBranch23 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch23");
            _flow.ReportMessageActivity46 = new HP.ST.Ext.BasicActivities.ReportMessageActivity(_context,"ReportMessageActivity46");
            _flow.FileWriteActivity48 = new HP.ST.Ext.BasicActivities.FileWriteActivity(_context,"FileWriteActivity48");
            _flow.ConcatenateStringsActivity65 = new HP.ST.Ext.BasicActivities.ConcatenateStringsActivity(_context,"ConcatenateStringsActivity65");
            _flow.FileWriteActivity32 = new HP.ST.Ext.BasicActivities.FileWriteActivity(_context,"FileWriteActivity32");
            _flow.FileCreateActivity55 = new HP.ST.Ext.BasicActivities.FileCreateActivity(_context,"FileCreateActivity55");
            _flow.ReportMessageActivity56 = new HP.ST.Ext.BasicActivities.ReportMessageActivity(_context,"ReportMessageActivity56");
            _flow.FileWriteActivity58 = new HP.ST.Ext.BasicActivities.FileWriteActivity(_context,"FileWriteActivity58");
            _flow.FileWriteActivity57 = new HP.ST.Ext.BasicActivities.FileWriteActivity(_context,"FileWriteActivity57");
            _flow.FileWriteActivity27 = new HP.ST.Ext.BasicActivities.FileWriteActivity(_context,"FileWriteActivity27");
            _flow.StServiceCallActivity20 = new HP.ST.Ext.WebServicesActivities.StServiceCallActivity(_context,"StServiceCallActivity20");
            _flow.ReportMessageActivity43 = new HP.ST.Ext.BasicActivities.ReportMessageActivity(_context,"ReportMessageActivity43");
            _flow.FileWriteActivity44 = new HP.ST.Ext.BasicActivities.FileWriteActivity(_context,"FileWriteActivity44");
            _flow.Break36 = new HP.ST.Fwk.RunTimeFWK.Break(_context,"Break36");
            _flow.ReportMessageActivity51 = new HP.ST.Ext.BasicActivities.ReportMessageActivity(_context,"ReportMessageActivity51");
            _flow.FileWriteActivity50 = new HP.ST.Ext.BasicActivities.FileWriteActivity(_context,"FileWriteActivity50");
            _flow.DataFetchActivity73.Comment = @"";
            _flow.DataFetchActivity73.IconPath = @"";
            _flow.DataFetchActivity73.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity73.QueryClassName = @"HP.ST.Ext.CustomDataProviders.LocalDataQuery";
            XmlDocument DataFetchActivity73_QueryParameters_Document = new XmlDocument();
            DataFetchActivity73_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity73Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>74b85b71-63d4-4790-a9de-b782f9ffdc0c</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>File</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>TableStructure</Name><Value>ORD_num,String,</Value></QueryParameter><QueryParameter><Name>TableContents</Name><Value>Order_num</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity73_QueryParameters_Document.LoadXml(xmlDataFetchActivity73Params);
            _flow.DataFetchActivity73.QueryParameters = DataFetchActivity73_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("File", _flow.DataFetchActivity73);
            this.Activities.Add (_flow.DataFetchActivity73);
            _flow.DataFetchActivity70.Comment = @"";
            _flow.DataFetchActivity70.IconPath = @"";
            _flow.DataFetchActivity70.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity70.QueryClassName = @"HP.ST.Ext.CustomDataProviders.LocalDataQuery";
            XmlDocument DataFetchActivity70_QueryParameters_Document = new XmlDocument();
            DataFetchActivity70_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity70Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>ae82ab44-7e78-4fec-826d-dc3e1caf11f8</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>flight number</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>TableStructure</Name><Value>number,String,</Value></QueryParameter><QueryParameter><Name>TableContents</Name><Value>15809^</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity70_QueryParameters_Document.LoadXml(xmlDataFetchActivity70Params);
            _flow.DataFetchActivity70.QueryParameters = DataFetchActivity70_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("flight number", _flow.DataFetchActivity70);
            this.Activities.Add (_flow.DataFetchActivity70);
            _flow.DataFetchActivity67.Comment = @"";
            _flow.DataFetchActivity67.IconPath = @"";
            _flow.DataFetchActivity67.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity67.QueryClassName = @"HP.ST.Ext.CustomDataProviders.LocalDataQuery";
            XmlDocument DataFetchActivity67_QueryParameters_Document = new XmlDocument();
            DataFetchActivity67_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity67Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>669f7775-31f5-44c5-9178-65b02cb66c51</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>flight</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>TableStructure</Name><Value>date,Date,</Value></QueryParameter><QueryParameter><Name>TableContents</Name><Value>05-Apr-17 12:00:00 AM</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity67_QueryParameters_Document.LoadXml(xmlDataFetchActivity67Params);
            _flow.DataFetchActivity67.QueryParameters = DataFetchActivity67_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("flight", _flow.DataFetchActivity67);
            this.Activities.Add (_flow.DataFetchActivity67);
            _flow.StartActivity1.Comment = @"";
            _flow.StartActivity1.IconPath = @"C:\Program Files (x86)\Hp\Unified Functional Testing\AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.StartActivity1.Name = @"Start";
            _flow.StartActivity1.JVM = new HP.ST.Ext.BasicActivities.JVMProperties();
            _flow.StartActivity1.IsJavaUsed = false;
            _flow.StartActivity1.JVM.Classpath = @"%CLASSPATH%";
            _flow.StartActivity1.JVM.AdditionalVMParameters = @"";
            _flow.StartActivity1.JMS = new HP.ST.Ext.BasicActivities.JMSProperties();
            _flow.StartActivity1.IsJmsUsed = false;
            _flow.StartActivity1.JMS.JNDIContextFactory = @"<Select...>";
            _flow.StartActivity1.JMS.JNDIProviderUrl = @"";
            _flow.StartActivity1.JMS.JMSConnectionFactory = @"";
            _flow.StartActivity1.JMS.SecurityPrincipal = @"";
            _flow.StartActivity1.JMS.SecurityCredentials = @"";
            _flow.StartActivity1.JMS.ConnectionsPerProcess = @"1";
            _flow.StartActivity1.JMS.TimeoutOptions = @"DN_User_defined_Timeout";
            _flow.StartActivity1.JMS.UserTimeout = @"20";
            _flow.StartActivity1.JMS.GenerateAutoSelector = @"No";
            this.Activities.Add (_flow.StartActivity1);
            _flow.Loop2.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop2.NumberOfIterations = (int)1;
            _flow.Loop2.Comment = @"";
            _flow.Loop2.IconPath = @"C:\Program Files (x86)\Hp\Unified Functional Testing\AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop2.Name = @"Test Flow";
            _flow.Loop2.Activities.Add (this.DataCursorActivity77);
            _flow.Loop2.Activities.Add (this.DataCursorActivity78);
            _flow.Loop2.Activities.Add (this.DataCursorActivity79);
            _flow.Loop2.Activities.Add (_flow.Sequence66);
            this.Activities.Add (_flow.Loop2);
            _flow.DataExporterActivity69.Comment = @"";
            _flow.DataExporterActivity69.IconPath = @"";
            VTDPropertyInfoBase pi1 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter1 = new VTDObjectGetter(pi1);
            VTDPropertyInfoBase pi2 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter1 = new VTDObjectSetter(pi2);
            binding_setter1 = new StringFormaterDecorator(binding_setter1,"{Step.DataFetchActivity67.OutTable}");
            bind_dir1 = new BindDirection(_flow.DataFetchActivity67,binding_getter1,binding_setter1,BindTargetType.ToInProperty);
            _flow.DataExporterActivity69.InDirections.Add(bind_dir1);
            this.Activities.Add (_flow.DataExporterActivity69);
            _flow.DataExporterActivity72.Comment = @"";
            _flow.DataExporterActivity72.IconPath = @"";
            VTDPropertyInfoBase pi3 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter2 = new VTDObjectGetter(pi3);
            VTDPropertyInfoBase pi4 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter2 = new VTDObjectSetter(pi4);
            binding_setter2 = new StringFormaterDecorator(binding_setter2,"{Step.DataFetchActivity70.OutTable}");
            bind_dir2 = new BindDirection(_flow.DataFetchActivity70,binding_getter2,binding_setter2,BindTargetType.ToInProperty);
            _flow.DataExporterActivity72.InDirections.Add(bind_dir2);
            this.Activities.Add (_flow.DataExporterActivity72);
            _flow.DataExporterActivity75.Comment = @"";
            _flow.DataExporterActivity75.IconPath = @"";
            VTDPropertyInfoBase pi5 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter3 = new VTDObjectGetter(pi5);
            VTDPropertyInfoBase pi6 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter3 = new VTDObjectSetter(pi6);
            binding_setter3 = new StringFormaterDecorator(binding_setter3,"{Step.DataFetchActivity73.OutTable}");
            bind_dir3 = new BindDirection(_flow.DataFetchActivity73,binding_getter3,binding_setter3,BindTargetType.ToInProperty);
            _flow.DataExporterActivity75.InDirections.Add(bind_dir3);
            this.Activities.Add (_flow.DataExporterActivity75);
            _flow.DataExporterCloseActivity76.Comment = @"";
            _flow.DataExporterCloseActivity76.IconPath = @"";
            this.Activities.Add (_flow.DataExporterCloseActivity76);
            _flow.EndActivity3.Comment = @"";
            _flow.EndActivity3.IconPath = @"C:\Program Files (x86)\Hp\Unified Functional Testing\AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.EndActivity3.Name = @"End";
            this.Activities.Add (_flow.EndActivity3);
            _flow.DataDisconnectActivity68.Comment = @"";
            _flow.DataDisconnectActivity68.IconPath = @"";
            VTDPropertyInfoBase pi7 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter4 = new VTDObjectGetter(pi7);
            VTDPropertyInfoBase pi8 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter4 = new VTDObjectSetter(pi8);
            binding_setter4 = new StringFormaterDecorator(binding_setter4,"{Step.DataFetchActivity67.OutTable}");
            bind_dir4 = new BindDirection(_flow.DataFetchActivity67,binding_getter4,binding_setter4,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity68.InDirections.Add(bind_dir4);
            this.Activities.Add (_flow.DataDisconnectActivity68);
            _flow.DataDisconnectActivity71.Comment = @"";
            _flow.DataDisconnectActivity71.IconPath = @"";
            VTDPropertyInfoBase pi9 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter5 = new VTDObjectGetter(pi9);
            VTDPropertyInfoBase pi10 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter5 = new VTDObjectSetter(pi10);
            binding_setter5 = new StringFormaterDecorator(binding_setter5,"{Step.DataFetchActivity70.OutTable}");
            bind_dir5 = new BindDirection(_flow.DataFetchActivity70,binding_getter5,binding_setter5,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity71.InDirections.Add(bind_dir5);
            this.Activities.Add (_flow.DataDisconnectActivity71);
            _flow.DataDisconnectActivity74.Comment = @"";
            _flow.DataDisconnectActivity74.IconPath = @"";
            VTDPropertyInfoBase pi11 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter6 = new VTDObjectGetter(pi11);
            VTDPropertyInfoBase pi12 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter6 = new VTDObjectSetter(pi12);
            binding_setter6 = new StringFormaterDecorator(binding_setter6,"{Step.DataFetchActivity73.OutTable}");
            bind_dir6 = new BindDirection(_flow.DataFetchActivity73,binding_getter6,binding_setter6,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity74.InDirections.Add(bind_dir6);
            this.Activities.Add (_flow.DataDisconnectActivity74);
            this.DataCursorActivity77.Comment = @"";
            this.DataCursorActivity77.IconPath = @"";
            VTDPropertyInfoBase pi13 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter7 = new VTDObjectGetter(pi13);
            VTDPropertyInfoBase pi14 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter7 = new VTDObjectSetter(pi14);
            binding_setter7 = new StringFormaterDecorator(binding_setter7,"{Step.DataFetchActivity67.OutTable}");
            bind_dir7 = new BindDirection(_flow.DataFetchActivity67,binding_getter7,binding_setter7,BindTargetType.ToInProperty);
            this.DataCursorActivity77.InDirections.Add(bind_dir7);
            this.DataCursorActivity77_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity77_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity77_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity77_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity77_Policy.StartCondition.Value = "";
            this.DataCursorActivity77_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity77_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity77_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity77_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity77_Policy.EndCondition.Value = "";
            this.DataCursorActivity77_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity77_Policy.StepSize = 1;
            this.DataCursorActivity77_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity77.Policy = this.DataCursorActivity77_Policy;
            this.DataCursorActivity77.ReportStepData = true;
            _flow.Loop2.BeforeExecuteStepEvent += this.DataCursorActivity77.ResetCursor;
            this.DataCursorActivity78.Comment = @"";
            this.DataCursorActivity78.IconPath = @"";
            VTDPropertyInfoBase pi15 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter8 = new VTDObjectGetter(pi15);
            VTDPropertyInfoBase pi16 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter8 = new VTDObjectSetter(pi16);
            binding_setter8 = new StringFormaterDecorator(binding_setter8,"{Step.DataFetchActivity70.OutTable}");
            bind_dir8 = new BindDirection(_flow.DataFetchActivity70,binding_getter8,binding_setter8,BindTargetType.ToInProperty);
            this.DataCursorActivity78.InDirections.Add(bind_dir8);
            this.DataCursorActivity78_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity78_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity78_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity78_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity78_Policy.StartCondition.Value = "";
            this.DataCursorActivity78_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity78_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity78_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity78_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity78_Policy.EndCondition.Value = "";
            this.DataCursorActivity78_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity78_Policy.StepSize = 1;
            this.DataCursorActivity78_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity78.Policy = this.DataCursorActivity78_Policy;
            this.DataCursorActivity78.ReportStepData = true;
            _flow.Loop2.BeforeExecuteStepEvent += this.DataCursorActivity78.ResetCursor;
            this.DataCursorActivity79.Comment = @"";
            this.DataCursorActivity79.IconPath = @"";
            VTDPropertyInfoBase pi17 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter9 = new VTDObjectGetter(pi17);
            VTDPropertyInfoBase pi18 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter9 = new VTDObjectSetter(pi18);
            binding_setter9 = new StringFormaterDecorator(binding_setter9,"{Step.DataFetchActivity73.OutTable}");
            bind_dir9 = new BindDirection(_flow.DataFetchActivity73,binding_getter9,binding_setter9,BindTargetType.ToInProperty);
            this.DataCursorActivity79.InDirections.Add(bind_dir9);
            this.DataCursorActivity79_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity79_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity79_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity79_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity79_Policy.StartCondition.Value = "";
            this.DataCursorActivity79_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity79_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity79_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity79_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity79_Policy.EndCondition.Value = "";
            this.DataCursorActivity79_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity79_Policy.StepSize = 1;
            this.DataCursorActivity79_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity79.Policy = this.DataCursorActivity79_Policy;
            this.DataCursorActivity79.ReportStepData = true;
            _flow.Loop2.BeforeExecuteStepEvent += this.DataCursorActivity79.ResetCursor;
            _flow.Sequence66.Comment = @"";
            _flow.Sequence66.IconPath = @"";
            _flow.Sequence66.Name = @"Sequence66";
            _flow.Sequence66.Activities.Add (_flow.StServiceCallActivity10);
            _flow.Sequence66.Activities.Add (_flow.StServiceCallActivity12);
            _flow.Sequence66.Activities.Add (_flow.FileExistsActivity33);
            _flow.Sequence66.Activities.Add (_flow.IfElse29);
            _flow.Sequence66.Activities.Add (_flow.ReportMessageActivity42);
            _flow.Sequence66.Activities.Add (_flow.FileWriteActivity47);
            _flow.Sequence66.Activities.Add (_flow.StServiceCallActivity17);
            _flow.Sequence66.Activities.Add (_flow.IfElse21);
            _flow.Sequence66.Activities.Add (_flow.ReportMessageActivity41);
            _flow.Sequence66.Activities.Add (_flow.FileWriteActivity52);
            _flow.Sequence66.Activities.Add (_flow.FileWriteActivity60);
            XmlDocument StServiceCallActivity10_InputEnvelope_Document = new XmlDocument();
            StServiceCallActivity10_InputEnvelope_Document.PreserveWhitespace = true;
            StServiceCallActivity10_InputEnvelope_Document.LoadXml(
@"<?xml version=""1.0"" encoding=""utf-8""?>
<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/"">
  <Body>
    <GetFlights xmlns=""HP.SOAQ.SampleApp"">
      <DepartureCity>Denver</DepartureCity>
      <ArrivalCity>Frankfurt</ArrivalCity>
      <FlightDate>{DataSource.flight.date}</FlightDate>
    </GetFlights>
  </Body>
</Envelope>");
            _flow.StServiceCallActivity10.InputEnvelope = StServiceCallActivity10_InputEnvelope_Document;
            _flow.StServiceCallActivity10.Comment = @"";
            _flow.StServiceCallActivity10.IconPath = @"C:\Program Files (x86)\Hp\Unified Functional Testing\AddIns\ServiceTest\WSImportTechnology\ictb_service_operations_16.png";
            _flow.StServiceCallActivity10.Name = @"GetFlights";
            _flow.StServiceCallActivity10.TransportProtocol.SOAPProperties.EndpointAddress = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity10.TransportProtocol.SOAPProperties.EndpointAddress}")) ? @"http://localhost:8000/HPFlights_SOAP" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity10.TransportProtocol.SOAPProperties.EndpointAddress}");
            _flow.StServiceCallActivity10.TransportProtocol.SOAPProperties.SoapAction = @"HP.SOAQ.SampleApp/IFlightsSoapService/GetFlights";
            _flow.StServiceCallActivity10.TransportProtocol.SOAPProperties.ContentType = @"text/xml; charset=utf-8";
            _flow.StServiceCallActivity10.TransportProtocol.SOAPProperties.Timeout = (int)100000;
            _flow.StServiceCallActivity10.Service = @"HPFlights_Service";
            _flow.StServiceCallActivity10.Port = @"FlightsServiceMethods";
            _flow.StServiceCallActivity10.Operation = @"GetFlights";
            _flow.StServiceCallActivity10.IsOneWay = false;
            _flow.StServiceCallActivity10.SendRequestToService=true;
            _flow.StServiceCallActivity10.FaultExpected=false;
            _flow.StServiceCallActivity10.IsAsync=false;
            _flow.StServiceCallActivity10.TargetNamespace=@"http://tempuri.org/";
            _flow.StServiceCallActivity10.ListenOnPort = (int)0;
            XmlDocument StServiceCallActivity10_ChannelBindingXml = new XmlDocument();
            StServiceCallActivity10_ChannelBindingXml.PreserveWhitespace = true;
            StServiceCallActivity10_ChannelBindingXml.LoadXml(@"<?xml version=""1.0""?>
            <ArrayOfChannelBindingBase xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">
              <ChannelBindingBase xsi:type=""HttpChannelBinding"">
                <IsKeepAlive>false</IsKeepAlive>
                <IsPreemptiveAuthentication>false</IsPreemptiveAuthentication>
                <ConnectionTimeout>0</ConnectionTimeout>
              </ChannelBindingBase>
            </ArrayOfChannelBindingBase>");
            _flow.StServiceCallActivity10.ChannelBindingXml = StServiceCallActivity10_ChannelBindingXml;
            VTDPropertyInfoBase pi19 = new VTDPropertyInfoBase("date");
            VTDBaseGetter binding_getter10 = new VTDObjectGetter(pi19);
            VTDPropertyInfoBase pi20 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlights'][1]/*[local-name(.)='FlightDate'][1]");
            VTDBaseSetter binding_setter10 = new VTDXPathSetter(pi20,XmlTypeCode.DateTime);
            bind_dir10 = new BindDirection(this.DataCursorActivity77,binding_getter10,binding_setter10,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity10.InDirections.Add(bind_dir10);
            XmlDocument StServiceCallActivity10_ExpectedOutputAttachments_Document = new XmlDocument();
            StServiceCallActivity10_ExpectedOutputAttachments_Document.PreserveWhitespace = true;
            StServiceCallActivity10_ExpectedOutputAttachments_Document.LoadXml(
@"<OutputAttachments><Attachments><Content /><ContentType /><ContentID /></Attachments></OutputAttachments>");
            _flow.StServiceCallActivity10.ExpectedOutputAttachments = StServiceCallActivity10_ExpectedOutputAttachments_Document;
            XmlDocument StServiceCallActivity10_ExpectedFaultProperties_Document = new XmlDocument();
            StServiceCallActivity10_ExpectedFaultProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity10_ExpectedFaultProperties_Document.LoadXml(
@"<tns:Envelope xmlns:tns=""http://schemas.xmlsoap.org/soap/envelope/""><tns:Body><tns:Fault><faultcode /><faultstring /></tns:Fault></tns:Body></tns:Envelope>");
            _flow.StServiceCallActivity10.ExpectedFaultProperties = StServiceCallActivity10_ExpectedFaultProperties_Document;
            XmlDocument StServiceCallActivity10_ExpectedOutputProperties_Document = new XmlDocument();
            StServiceCallActivity10_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity10_ExpectedOutputProperties_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:p1=""http://www.w3.org/2001/XMLSchema-instance""><Body><GetFlightsResponse xmlns=""HP.SOAQ.SampleApp""><GetFlightsResult><Flight><Airline p1:nil=""true"" /><ArrivalCity p1:nil=""true"" /><ArrivalTime p1:nil=""true"" /><DepartureCity></DepartureCity><DepartureTime p1:nil=""true"" /><FlightNumber /></Flight></GetFlightsResult></GetFlightsResponse></Body></Envelope>");
            _flow.StServiceCallActivity10.ExpectedOutputProperties = StServiceCallActivity10_ExpectedOutputProperties_Document;
            set_StServiceCallActivity10_checkpoints(_flow.StServiceCallActivity10);
            XmlDocument StServiceCallActivity12_InputEnvelope_Document = new XmlDocument();
            StServiceCallActivity12_InputEnvelope_Document.PreserveWhitespace = true;
            StServiceCallActivity12_InputEnvelope_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:p1=""http://www.w3.org/2001/XMLSchema-instance""><Body><CreateFlightOrder xmlns=""HP.SOAQ.SampleApp""><FlightOrder><Class>Business</Class><CustomerName>sourabh</CustomerName><DepartureDate>{DataSource.flight.date}</DepartureDate><FlightNumber>{DataSource.flight number.number}</FlightNumber><NumberOfTickets>2</NumberOfTickets></FlightOrder></CreateFlightOrder></Body></Envelope>");
            _flow.StServiceCallActivity12.InputEnvelope = StServiceCallActivity12_InputEnvelope_Document;
            _flow.StServiceCallActivity12.Comment = @"";
            _flow.StServiceCallActivity12.IconPath = @"C:\Program Files (x86)\Hp\Unified Functional Testing\AddIns\ServiceTest\WSImportTechnology\ictb_service_operations_16.png";
            _flow.StServiceCallActivity12.Name = @"CreateFlightOrder";
            _flow.StServiceCallActivity12.TransportProtocol.SOAPProperties.EndpointAddress = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity12.TransportProtocol.SOAPProperties.EndpointAddress}")) ? @"http://localhost:8000/HPFlights_SOAP" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity12.TransportProtocol.SOAPProperties.EndpointAddress}");
            _flow.StServiceCallActivity12.TransportProtocol.SOAPProperties.SoapAction = @"HP.SOAQ.SampleApp/IFlightsSoapService/CreateFlightOrder";
            _flow.StServiceCallActivity12.TransportProtocol.SOAPProperties.ContentType = @"text/xml; charset=utf-8";
            _flow.StServiceCallActivity12.TransportProtocol.SOAPProperties.Timeout = (int)100000;
            _flow.StServiceCallActivity12.Service = @"HPFlights_Service";
            _flow.StServiceCallActivity12.Port = @"FlightsServiceMethods";
            _flow.StServiceCallActivity12.Operation = @"CreateFlightOrder";
            _flow.StServiceCallActivity12.IsOneWay = false;
            _flow.StServiceCallActivity12.SendRequestToService=true;
            _flow.StServiceCallActivity12.FaultExpected=false;
            _flow.StServiceCallActivity12.IsAsync=false;
            _flow.StServiceCallActivity12.TargetNamespace=@"http://tempuri.org/";
            _flow.StServiceCallActivity12.ListenOnPort = (int)0;
            XmlDocument StServiceCallActivity12_ChannelBindingXml = new XmlDocument();
            StServiceCallActivity12_ChannelBindingXml.PreserveWhitespace = true;
            StServiceCallActivity12_ChannelBindingXml.LoadXml(@"<?xml version=""1.0""?>
            <ArrayOfChannelBindingBase xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">
              <ChannelBindingBase xsi:type=""HttpChannelBinding"">
                <IsKeepAlive>false</IsKeepAlive>
                <IsPreemptiveAuthentication>false</IsPreemptiveAuthentication>
                <ConnectionTimeout>0</ConnectionTimeout>
              </ChannelBindingBase>
            </ArrayOfChannelBindingBase>");
            _flow.StServiceCallActivity12.ChannelBindingXml = StServiceCallActivity12_ChannelBindingXml;
            VTDPropertyInfoBase pi21 = new VTDPropertyInfoBase("number");
            VTDBaseGetter binding_getter11 = new VTDObjectGetter(pi21);
            VTDPropertyInfoBase pi22 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrder'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='FlightNumber'][1]");
            VTDBaseSetter binding_setter11 = new VTDXPathSetter(pi22,XmlTypeCode.Int);
            bind_dir11 = new BindDirection(this.DataCursorActivity78,binding_getter11,binding_setter11,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity12.InDirections.Add(bind_dir11);
            VTDPropertyInfoBase pi23 = new VTDPropertyInfoBase("date");
            VTDBaseGetter binding_getter12 = new VTDObjectGetter(pi23);
            VTDPropertyInfoBase pi24 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrder'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='DepartureDate'][1]");
            VTDBaseSetter binding_setter12 = new VTDXPathSetter(pi24,XmlTypeCode.DateTime);
            bind_dir12 = new BindDirection(this.DataCursorActivity77,binding_getter12,binding_setter12,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity12.InDirections.Add(bind_dir12);
            XmlDocument StServiceCallActivity12_ExpectedOutputAttachments_Document = new XmlDocument();
            StServiceCallActivity12_ExpectedOutputAttachments_Document.PreserveWhitespace = true;
            StServiceCallActivity12_ExpectedOutputAttachments_Document.LoadXml(
@"<OutputAttachments />");
            _flow.StServiceCallActivity12.ExpectedOutputAttachments = StServiceCallActivity12_ExpectedOutputAttachments_Document;
            XmlDocument StServiceCallActivity12_ExpectedFaultProperties_Document = new XmlDocument();
            StServiceCallActivity12_ExpectedFaultProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity12_ExpectedFaultProperties_Document.LoadXml(
@"<tns:Envelope xmlns:tns=""http://schemas.xmlsoap.org/soap/envelope/""><tns:Body><tns:Fault><faultcode /><faultstring /></tns:Fault></tns:Body></tns:Envelope>");
            _flow.StServiceCallActivity12.ExpectedFaultProperties = StServiceCallActivity12_ExpectedFaultProperties_Document;
            XmlDocument StServiceCallActivity12_ExpectedOutputProperties_Document = new XmlDocument();
            StServiceCallActivity12_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity12_ExpectedOutputProperties_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/""><Body><CreateFlightOrderResponse xmlns=""HP.SOAQ.SampleApp""><CreateFlightOrderResult><OrderNumber>{DataSource.File.ORD_num}</OrderNumber></CreateFlightOrderResult></CreateFlightOrderResponse></Body></Envelope>");
            _flow.StServiceCallActivity12.ExpectedOutputProperties = StServiceCallActivity12_ExpectedOutputProperties_Document;
            VTDPropertyInfoBase pi25 = new VTDPropertyInfoBase("ORD_num");
            VTDBaseGetter binding_getter13 = new VTDObjectGetter(pi25);
            VTDPropertyInfoBase pi26 = new VTDPropertyInfoBase("OutputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrderResponse'][1]/*[local-name(.)='CreateFlightOrderResult'][1]/*[local-name(.)='OrderNumber'][1]");
            VTDBaseSetter binding_setter13 = new VTDCheckpointSetter(XmlTypeCode.Int);
            bind_dir13 = new BindDirection(this.DataCursorActivity79,binding_getter13,binding_setter13,BindTargetType.ToInProperty);
            set_StServiceCallActivity12_checkpoints(_flow.StServiceCallActivity12);
            _flow.FileExistsActivity33.FilePath = @"C:\Users\Yogesh\Desktop\Message.txt";
            _flow.FileExistsActivity33.Comment = @"";
            _flow.FileExistsActivity33.IconPath = @"C:\Program Files (x86)\Hp\Unified Functional Testing\AddIns\ServiceTest\BasicActivities\toolbox_file_exists.png";
            _flow.FileExistsActivity33.Name = @"File Exists33";
            _flow.IfElse29.ConditionAsString = @"{Step.OutputProperties.FileExistsActivity33.FileExists} Equal True";
            _flow.IfElse29.Input.File = @"";
            _flow.IfElse29.Comment = @"";
            _flow.IfElse29.IconPath = @"C:\Program Files (x86)\Hp\Unified Functional Testing\AddIns\ServiceTest\BasicActivities\toolbox_if_else.png";
            _flow.IfElse29.Name = @"Condition29";
            _flow.IfElse29.Activities.Add (_flow.IfElseBranch30);
            _flow.IfElse29.Activities.Add (_flow.IfElseBranch31);
            _flow.ReportMessageActivity42.Status = @"Done";
            _flow.ReportMessageActivity42.Message = @"Order number generate";
            _flow.ReportMessageActivity42.Destination = @"ReportAndOutput";
            _flow.ReportMessageActivity42.Comment = @"";
            _flow.ReportMessageActivity42.IconPath = @"C:\Program Files (x86)\Hp\Unified Functional Testing\AddIns\ServiceTest\BasicActivities\toolbox_report_message.png";
            _flow.ReportMessageActivity42.Name = @"Report Message42";
            _flow.FileWriteActivity47.Content = @"{Step.InputProperties.ReportMessageActivity42.Message}";
            _flow.FileWriteActivity47.FilePath = @"C:\Users\Yogesh\Desktop\Message.txt";
            _flow.FileWriteActivity47.Mode = @"Append";
            _flow.FileWriteActivity47.Encoding = @"ASCII";
            _flow.FileWriteActivity47.AppendNewLine = true;
            _flow.FileWriteActivity47.Comment = @"";
            _flow.FileWriteActivity47.IconPath = @"C:\Program Files (x86)\Hp\Unified Functional Testing\AddIns\ServiceTest\BasicActivities\toolbox_filewrite.png";
            _flow.FileWriteActivity47.Name = @"Write to File47";
            VTDPropertyInfoBase pi27 = new VTDPropertyInfoBase("Message");
            VTDBaseGetter binding_getter14 = new VTDObjectGetter(pi27);
            VTDPropertyInfoBase pi28 = new VTDPropertyInfoBase("Content");
            VTDBaseSetter binding_setter14 = new VTDObjectSetter(pi28);
            binding_setter14 = new StringFormaterDecorator(binding_setter14,"{Step.InputProperties.ReportMessageActivity42.Message}");
            bind_dir14 = new BindDirection(_flow.ReportMessageActivity42,binding_getter14,binding_setter14,BindTargetType.ToInProperty);
            _flow.FileWriteActivity47.InDirections.Add(bind_dir14);
            _flow.FileWriteActivity47.CodeCheckPointEvent += _userCode.FileWriteActivity47_OnCodeCheckPointEvent;
            XmlDocument StServiceCallActivity17_InputEnvelope_Document = new XmlDocument();
            StServiceCallActivity17_InputEnvelope_Document.PreserveWhitespace = true;
            StServiceCallActivity17_InputEnvelope_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:p1=""http://www.w3.org/2001/XMLSchema-instance""><Body><GetFlightOrders xmlns=""HP.SOAQ.SampleApp""><FlightsDetails><CustomerName p1:nil=""true"">{Step.InputProperties.StServiceCallActivity12.Body.CreateFlightOrder.FlightOrder.CustomerName}</CustomerName><FlightDate>{Step.InputProperties.StServiceCallActivity12.Body.CreateFlightOrder.FlightOrder.DepartureDate}</FlightDate><OrderNumber>{Step.OutputProperties.StServiceCallActivity12.Body.CreateFlightOrderResponse.CreateFlightOrderResult.OrderNumber}</OrderNumber></FlightsDetails></GetFlightOrders></Body></Envelope>");
            _flow.StServiceCallActivity17.InputEnvelope = StServiceCallActivity17_InputEnvelope_Document;
            _flow.StServiceCallActivity17.Comment = @"";
            _flow.StServiceCallActivity17.IconPath = @"C:\Program Files (x86)\Hp\Unified Functional Testing\AddIns\ServiceTest\WSImportTechnology\ictb_service_operations_16.png";
            _flow.StServiceCallActivity17.Name = @"GetFlightOrders";
            _flow.StServiceCallActivity17.TransportProtocol.SOAPProperties.EndpointAddress = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity17.TransportProtocol.SOAPProperties.EndpointAddress}")) ? @"http://localhost:8000/HPFlights_SOAP" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity17.TransportProtocol.SOAPProperties.EndpointAddress}");
            _flow.StServiceCallActivity17.TransportProtocol.SOAPProperties.SoapAction = @"HP.SOAQ.SampleApp/IFlightsSoapService/GetFlightOrders";
            _flow.StServiceCallActivity17.TransportProtocol.SOAPProperties.ContentType = @"text/xml; charset=utf-8";
            _flow.StServiceCallActivity17.TransportProtocol.SOAPProperties.Timeout = (int)100000;
            _flow.StServiceCallActivity17.Service = @"HPFlights_Service";
            _flow.StServiceCallActivity17.Port = @"FlightsServiceMethods";
            _flow.StServiceCallActivity17.Operation = @"GetFlightOrders";
            _flow.StServiceCallActivity17.IsOneWay = false;
            _flow.StServiceCallActivity17.SendRequestToService=true;
            _flow.StServiceCallActivity17.FaultExpected=false;
            _flow.StServiceCallActivity17.IsAsync=false;
            _flow.StServiceCallActivity17.TargetNamespace=@"http://tempuri.org/";
            _flow.StServiceCallActivity17.ListenOnPort = (int)0;
            XmlDocument StServiceCallActivity17_ChannelBindingXml = new XmlDocument();
            StServiceCallActivity17_ChannelBindingXml.PreserveWhitespace = true;
            StServiceCallActivity17_ChannelBindingXml.LoadXml(@"<?xml version=""1.0""?>
            <ArrayOfChannelBindingBase xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">
              <ChannelBindingBase xsi:type=""HttpChannelBinding"">
                <IsKeepAlive>false</IsKeepAlive>
                <IsPreemptiveAuthentication>false</IsPreemptiveAuthentication>
                <ConnectionTimeout>0</ConnectionTimeout>
              </ChannelBindingBase>
            </ArrayOfChannelBindingBase>");
            _flow.StServiceCallActivity17.ChannelBindingXml = StServiceCallActivity17_ChannelBindingXml;
            VTDPropertyInfoBase pi29 = new VTDPropertyInfoBase("OutputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrderResponse'][1]/*[local-name(.)='CreateFlightOrderResult'][1]/*[local-name(.)='OrderNumber'][1]");
            VTDBaseGetter binding_getter15 = new VTDXPathGetter(pi29,XmlTypeCode.Int);
            VTDPropertyInfoBase pi30 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlightOrders'][1]/*[local-name(.)='FlightsDetails'][1]/*[local-name(.)='OrderNumber'][1]");
            VTDBaseSetter binding_setter15 = new VTDXPathSetter(pi30,XmlTypeCode.Int);
            bind_dir15 = new BindDirection(_flow.StServiceCallActivity12,binding_getter15,binding_setter15,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity17.InDirections.Add(bind_dir15);
            VTDPropertyInfoBase pi31 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrder'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='DepartureDate'][1]");
            VTDBaseGetter binding_getter16 = new VTDXPathGetter(pi31,XmlTypeCode.DateTime);
            VTDPropertyInfoBase pi32 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlightOrders'][1]/*[local-name(.)='FlightsDetails'][1]/*[local-name(.)='FlightDate'][1]");
            VTDBaseSetter binding_setter16 = new VTDXPathSetter(pi32,XmlTypeCode.DateTime);
            bind_dir16 = new BindDirection(_flow.StServiceCallActivity12,binding_getter16,binding_setter16,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity17.InDirections.Add(bind_dir16);
            VTDPropertyInfoBase pi33 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrder'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='CustomerName'][1]");
            VTDBaseGetter binding_getter17 = new VTDXPathGetter(pi33,XmlTypeCode.String);
            VTDPropertyInfoBase pi34 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlightOrders'][1]/*[local-name(.)='FlightsDetails'][1]/*[local-name(.)='CustomerName'][1]");
            VTDBaseSetter binding_setter17 = new VTDXPathSetter(pi34,XmlTypeCode.String);
            binding_setter17 = new StringFormaterDecorator(binding_setter17,"{Step.InputProperties.StServiceCallActivity12.Body.CreateFlightOrder.FlightOrder.CustomerName}");
            bind_dir17 = new BindDirection(_flow.StServiceCallActivity12,binding_getter17,binding_setter17,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity17.InDirections.Add(bind_dir17);
            XmlDocument StServiceCallActivity17_ExpectedOutputAttachments_Document = new XmlDocument();
            StServiceCallActivity17_ExpectedOutputAttachments_Document.PreserveWhitespace = true;
            StServiceCallActivity17_ExpectedOutputAttachments_Document.LoadXml(
@"<OutputAttachments />");
            _flow.StServiceCallActivity17.ExpectedOutputAttachments = StServiceCallActivity17_ExpectedOutputAttachments_Document;
            XmlDocument StServiceCallActivity17_ExpectedFaultProperties_Document = new XmlDocument();
            StServiceCallActivity17_ExpectedFaultProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity17_ExpectedFaultProperties_Document.LoadXml(
@"<tns:Envelope xmlns:tns=""http://schemas.xmlsoap.org/soap/envelope/""><tns:Body><tns:Fault><faultcode /><faultstring /></tns:Fault></tns:Body></tns:Envelope>");
            _flow.StServiceCallActivity17.ExpectedFaultProperties = StServiceCallActivity17_ExpectedFaultProperties_Document;
            XmlDocument StServiceCallActivity17_ExpectedOutputProperties_Document = new XmlDocument();
            StServiceCallActivity17_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity17_ExpectedOutputProperties_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:p1=""http://www.w3.org/2001/XMLSchema-instance""><Body><GetFlightOrdersResponse xmlns=""HP.SOAQ.SampleApp""><GetFlightOrdersResult><FlightOrder><CustomerName p1:nil=""true"" /><OrderNumber /></FlightOrder></GetFlightOrdersResult></GetFlightOrdersResponse></Body></Envelope>");
            _flow.StServiceCallActivity17.ExpectedOutputProperties = StServiceCallActivity17_ExpectedOutputProperties_Document;
            set_StServiceCallActivity17_checkpoints(_flow.StServiceCallActivity17);
            _flow.IfElse21.ConditionAsString = @"{Step.OutputProperties.StServiceCallActivity12.Body.CreateFlightOrderResponse.CreateFlightOrderResult.OrderNumber} Equal {Step.OutputProperties.StServiceCallActivity12.Body.CreateFlightOrderResponse.CreateFlightOrderResult.OrderNumber}";
            _flow.IfElse21.Input.Order = @"{Step.OutputProperties.StServiceCallActivity12.Body.CreateFlightOrderResponse.CreateFlightOrderResult.OrderNumber}";
            _flow.IfElse21.Comment = @"";
            _flow.IfElse21.IconPath = @"C:\Program Files (x86)\Hp\Unified Functional Testing\AddIns\ServiceTest\BasicActivities\toolbox_if_else.png";
            _flow.IfElse21.Name = @"Condition21";
            VTDPropertyInfoBase pi35 = new VTDPropertyInfoBase("OutputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrderResponse'][1]/*[local-name(.)='CreateFlightOrderResult'][1]/*[local-name(.)='OrderNumber'][1]");
            VTDBaseGetter binding_getter18 = new VTDXPathGetter(pi35,XmlTypeCode.Int);
            VTDPropertyInfoBase pi36 = new VTDPropertyInfoBase("Input.Order");
            VTDBaseSetter binding_setter18 = new VTDObjectSetter(pi36);
            binding_setter18 = new StringFormaterDecorator(binding_setter18,"{Step.OutputProperties.StServiceCallActivity12.Body.CreateFlightOrderResponse.CreateFlightOrderResult.OrderNumber}");
            bind_dir18 = new BindDirection(_flow.StServiceCallActivity12,binding_getter18,binding_setter18,BindTargetType.ToInProperty);
            _flow.IfElse21.InDirections.Add(bind_dir18);
            _flow.IfElse21.Activities.Add (_flow.IfElseBranch22);
            _flow.IfElse21.Activities.Add (_flow.IfElseBranch23);
            _flow.ReportMessageActivity41.Status = @"Done";
            _flow.ReportMessageActivity41.Message = @"Script work fine";
            _flow.ReportMessageActivity41.Destination = @"ReportAndOutput";
            _flow.ReportMessageActivity41.Comment = @"";
            _flow.ReportMessageActivity41.IconPath = @"C:\Program Files (x86)\Hp\Unified Functional Testing\AddIns\ServiceTest\BasicActivities\toolbox_report_message.png";
            _flow.ReportMessageActivity41.Name = @"Report Message41";
            _flow.FileWriteActivity52.Content = @"{Step.InputProperties.ReportMessageActivity41.Message}";
            _flow.FileWriteActivity52.FilePath = @"C:\Users\Yogesh\Desktop\Message.txt";
            _flow.FileWriteActivity52.Mode = @"Append";
            _flow.FileWriteActivity52.Encoding = @"ASCII";
            _flow.FileWriteActivity52.AppendNewLine = true;
            _flow.FileWriteActivity52.Comment = @"";
            _flow.FileWriteActivity52.IconPath = @"C:\Program Files (x86)\Hp\Unified Functional Testing\AddIns\ServiceTest\BasicActivities\toolbox_filewrite.png";
            _flow.FileWriteActivity52.Name = @"Write to File52";
            VTDPropertyInfoBase pi37 = new VTDPropertyInfoBase("Message");
            VTDBaseGetter binding_getter19 = new VTDObjectGetter(pi37);
            VTDPropertyInfoBase pi38 = new VTDPropertyInfoBase("Content");
            VTDBaseSetter binding_setter19 = new VTDObjectSetter(pi38);
            binding_setter19 = new StringFormaterDecorator(binding_setter19,"{Step.InputProperties.ReportMessageActivity41.Message}");
            bind_dir19 = new BindDirection(_flow.ReportMessageActivity41,binding_getter19,binding_setter19,BindTargetType.ToInProperty);
            _flow.FileWriteActivity52.InDirections.Add(bind_dir19);
            _flow.FileWriteActivity60.Content = @"------------------------------------------";
            _flow.FileWriteActivity60.FilePath = @"C:\Users\Yogesh\Desktop\Message.txt";
            _flow.FileWriteActivity60.Mode = @"Append";
            _flow.FileWriteActivity60.Encoding = @"ASCII";
            _flow.FileWriteActivity60.AppendNewLine = true;
            _flow.FileWriteActivity60.Comment = @"";
            _flow.FileWriteActivity60.IconPath = @"C:\Program Files (x86)\Hp\Unified Functional Testing\AddIns\ServiceTest\BasicActivities\toolbox_filewrite.png";
            _flow.FileWriteActivity60.Name = @"Write to File60";
            _flow.IfElseBranch30.Condition += delegate(object sender,EventArgs e)
            {
            	try
            	{
            VTDPropertyInfoBase pi39 = new VTDPropertyInfoBase("FileExists");
            VTDBaseGetter binding_getter20 = new VTDObjectGetter(pi39);
            		System.Boolean expr00 = (System.Boolean)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.FileExistsActivity33.GetParam(binding_getter20),typeof(System.Boolean));
            		var result0 = expr00;
            		System.Boolean result1 = (System.Boolean)(true);
            		return (result0 == result1);
            	}
            	catch(Exception exp)
            	{
            		if (exp is System.InvalidCastException)
            		{
            			throw;
            		}
            		else
            		{
            			return false;
            		}
            	};
            };
            _flow.IfElseBranch30.Comment = @"";
            _flow.IfElseBranch30.IconPath = @"";
            _flow.IfElseBranch30.Name = @"Yes";
            _flow.IfElseBranch30.Activities.Add (_flow.ReportMessageActivity46);
            _flow.IfElseBranch30.Activities.Add (_flow.FileWriteActivity48);
            _flow.IfElseBranch30.Activities.Add (_flow.ConcatenateStringsActivity65);
            _flow.IfElseBranch30.Activities.Add (_flow.FileWriteActivity32);
            _flow.IfElseBranch31.Condition += delegate(object sender,EventArgs e)
            {
            return true;
            };
            _flow.IfElseBranch31.Comment = @"";
            _flow.IfElseBranch31.IconPath = @"";
            _flow.IfElseBranch31.Name = @"No";
            _flow.IfElseBranch31.Activities.Add (_flow.FileCreateActivity55);
            _flow.IfElseBranch31.Activities.Add (_flow.ReportMessageActivity56);
            _flow.IfElseBranch31.Activities.Add (_flow.FileWriteActivity58);
            _flow.IfElseBranch31.Activities.Add (_flow.FileWriteActivity57);
            _flow.IfElseBranch31.Activities.Add (_flow.FileWriteActivity27);
            _flow.IfElseBranch22.Condition += delegate(object sender,EventArgs e)
            {
            	try
            	{
            VTDPropertyInfoBase pi40 = new VTDPropertyInfoBase("OutputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrderResponse'][1]/*[local-name(.)='CreateFlightOrderResult'][1]/*[local-name(.)='OrderNumber'][1]");
            VTDBaseGetter binding_getter21 = new VTDXPathGetter(pi40,XmlTypeCode.Int);
            		System.Int32 expr00 = (System.Int32)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.StServiceCallActivity12.GetParam(binding_getter21),typeof(System.Int32));
            		var result0 = expr00;
            VTDPropertyInfoBase pi41 = new VTDPropertyInfoBase("OutputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrderResponse'][1]/*[local-name(.)='CreateFlightOrderResult'][1]/*[local-name(.)='OrderNumber'][1]");
            VTDBaseGetter binding_getter22 = new VTDXPathGetter(pi41,XmlTypeCode.Int);
            		System.Int32 expr10 = (System.Int32)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.StServiceCallActivity12.GetParam(binding_getter22),typeof(System.Int32));
            		var result1 = expr10;
            		return (result0 == result1);
            	}
            	catch(Exception exp)
            	{
            		if (exp is System.InvalidCastException)
            		{
            			throw;
            		}
            		else
            		{
            			return false;
            		}
            	};
            };
            _flow.IfElseBranch22.Comment = @"";
            _flow.IfElseBranch22.IconPath = @"";
            _flow.IfElseBranch22.Name = @"Yes";
            _flow.IfElseBranch22.Activities.Add (_flow.StServiceCallActivity20);
            _flow.IfElseBranch22.Activities.Add (_flow.ReportMessageActivity43);
            _flow.IfElseBranch22.Activities.Add (_flow.FileWriteActivity44);
            _flow.IfElseBranch23.Condition += delegate(object sender,EventArgs e)
            {
            return true;
            };
            _flow.IfElseBranch23.Comment = @"";
            _flow.IfElseBranch23.IconPath = @"";
            _flow.IfElseBranch23.Name = @"No";
            _flow.IfElseBranch23.Activities.Add (_flow.Break36);
            _flow.IfElseBranch23.Activities.Add (_flow.ReportMessageActivity51);
            _flow.IfElseBranch23.Activities.Add (_flow.FileWriteActivity50);
            _flow.ReportMessageActivity46.Status = @"Done";
            _flow.ReportMessageActivity46.Message = @"Order number file is exist";
            _flow.ReportMessageActivity46.Destination = @"ReportAndOutput";
            _flow.ReportMessageActivity46.Comment = @"";
            _flow.ReportMessageActivity46.IconPath = @"C:\Program Files (x86)\Hp\Unified Functional Testing\AddIns\ServiceTest\BasicActivities\toolbox_report_message.png";
            _flow.ReportMessageActivity46.Name = @"Report Message46";
            _flow.FileWriteActivity48.Content = @"{Step.InputProperties.ReportMessageActivity46.Message}";
            _flow.FileWriteActivity48.FilePath = @"C:\Users\Yogesh\Desktop\Message.txt";
            _flow.FileWriteActivity48.Mode = @"Append";
            _flow.FileWriteActivity48.Encoding = @"ASCII";
            _flow.FileWriteActivity48.AppendNewLine = true;
            _flow.FileWriteActivity48.Comment = @"";
            _flow.FileWriteActivity48.IconPath = @"C:\Program Files (x86)\Hp\Unified Functional Testing\AddIns\ServiceTest\BasicActivities\toolbox_filewrite.png";
            _flow.FileWriteActivity48.Name = @"Write to File48";
            VTDPropertyInfoBase pi42 = new VTDPropertyInfoBase("Message");
            VTDBaseGetter binding_getter23 = new VTDObjectGetter(pi42);
            VTDPropertyInfoBase pi43 = new VTDPropertyInfoBase("Content");
            VTDBaseSetter binding_setter20 = new VTDObjectSetter(pi43);
            binding_setter20 = new StringFormaterDecorator(binding_setter20,"{Step.InputProperties.ReportMessageActivity46.Message}");
            bind_dir20 = new BindDirection(_flow.ReportMessageActivity46,binding_getter23,binding_setter20,BindTargetType.ToInProperty);
            _flow.FileWriteActivity48.InDirections.Add(bind_dir20);
            _flow.ConcatenateStringsActivity65.Prefix = @"order number :-";
            _flow.ConcatenateStringsActivity65.Suffix = @"{Step.OutputProperties.StServiceCallActivity12.Body.CreateFlightOrderResponse.CreateFlightOrderResult.OrderNumber}";
            _flow.ConcatenateStringsActivity65.Comment = @"";
            _flow.ConcatenateStringsActivity65.IconPath = @"C:\Program Files (x86)\Hp\Unified Functional Testing\AddIns\ServiceTest\BasicActivities\toolbox_concat.png";
            _flow.ConcatenateStringsActivity65.Name = @"Concatenate Strings65";
            VTDPropertyInfoBase pi44 = new VTDPropertyInfoBase("OutputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrderResponse'][1]/*[local-name(.)='CreateFlightOrderResult'][1]/*[local-name(.)='OrderNumber'][1]");
            VTDBaseGetter binding_getter24 = new VTDXPathGetter(pi44,XmlTypeCode.Int);
            VTDPropertyInfoBase pi45 = new VTDPropertyInfoBase("Suffix");
            VTDBaseSetter binding_setter21 = new VTDObjectSetter(pi45);
            binding_setter21 = new StringFormaterDecorator(binding_setter21,"{Step.OutputProperties.StServiceCallActivity12.Body.CreateFlightOrderResponse.CreateFlightOrderResult.OrderNumber}");
            bind_dir21 = new BindDirection(_flow.StServiceCallActivity12,binding_getter24,binding_setter21,BindTargetType.ToInProperty);
            _flow.ConcatenateStringsActivity65.InDirections.Add(bind_dir21);
            _flow.FileWriteActivity32.Content = @"{Step.OutputProperties.ConcatenateStringsActivity65.Result}";
            _flow.FileWriteActivity32.FilePath = @"C:\Users\Yogesh\Desktop\Message.txt";
            _flow.FileWriteActivity32.Mode = @"Append";
            _flow.FileWriteActivity32.Encoding = @"ASCII";
            _flow.FileWriteActivity32.AppendNewLine = true;
            _flow.FileWriteActivity32.Comment = @"";
            _flow.FileWriteActivity32.IconPath = @"C:\Program Files (x86)\Hp\Unified Functional Testing\AddIns\ServiceTest\BasicActivities\toolbox_filewrite.png";
            _flow.FileWriteActivity32.Name = @"Write to File32";
            VTDPropertyInfoBase pi46 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter25 = new VTDObjectGetter(pi46);
            VTDPropertyInfoBase pi47 = new VTDPropertyInfoBase("Content");
            VTDBaseSetter binding_setter22 = new VTDObjectSetter(pi47);
            binding_setter22 = new StringFormaterDecorator(binding_setter22,"{Step.OutputProperties.ConcatenateStringsActivity65.Result}");
            bind_dir22 = new BindDirection(_flow.ConcatenateStringsActivity65,binding_getter25,binding_setter22,BindTargetType.ToInProperty);
            _flow.FileWriteActivity32.InDirections.Add(bind_dir22);
            _flow.FileCreateActivity55.FolderPath = @"C:\Users\Yogesh\Desktop";
            _flow.FileCreateActivity55.FileName = @"Message";
            _flow.FileCreateActivity55.Overwrite = false;
            _flow.FileCreateActivity55.Comment = @"";
            _flow.FileCreateActivity55.IconPath = @"C:\Program Files (x86)\Hp\Unified Functional Testing\AddIns\ServiceTest\BasicActivities\toolbox_filecreate.png";
            _flow.FileCreateActivity55.Name = @"File Create55";
            _flow.ReportMessageActivity56.Status = @"Done";
            _flow.ReportMessageActivity56.Message = @"Order file is not exist so we created";
            _flow.ReportMessageActivity56.Destination = @"ReportAndOutput";
            _flow.ReportMessageActivity56.Comment = @"";
            _flow.ReportMessageActivity56.IconPath = @"C:\Program Files (x86)\Hp\Unified Functional Testing\AddIns\ServiceTest\BasicActivities\toolbox_report_message.png";
            _flow.ReportMessageActivity56.Name = @"Report Message56";
            _flow.ReportMessageActivity56.AfterExecuteStepEvent += _userCode.ReportMessageActivity45_OnAfterExecuteStepEvent;
            _flow.FileWriteActivity58.Content = @"Order number:-";
            _flow.FileWriteActivity58.FilePath = @"C:\Users\Yogesh\Desktop\Message.txt";
            _flow.FileWriteActivity58.Mode = @"Append";
            _flow.FileWriteActivity58.Encoding = @"ASCII";
            _flow.FileWriteActivity58.AppendNewLine = false;
            _flow.FileWriteActivity58.Comment = @"";
            _flow.FileWriteActivity58.IconPath = @"C:\Program Files (x86)\Hp\Unified Functional Testing\AddIns\ServiceTest\BasicActivities\toolbox_filewrite.png";
            _flow.FileWriteActivity58.Name = @"Write to File58";
            _flow.FileWriteActivity58.BeforeExecuteStepEvent += _userCode.FileWriteActivity27_OnBeforeExecuteStepEvent;
            _flow.FileWriteActivity57.Content = @"{Step.OutputProperties.StServiceCallActivity12.Body.CreateFlightOrderResponse.CreateFlightOrderResult.OrderNumber}";
            _flow.FileWriteActivity57.FilePath = @"C:\Users\Yogesh\Desktop\Message.txt";
            _flow.FileWriteActivity57.Mode = @"Append";
            _flow.FileWriteActivity57.Encoding = @"ASCII";
            _flow.FileWriteActivity57.AppendNewLine = true;
            _flow.FileWriteActivity57.Comment = @"";
            _flow.FileWriteActivity57.IconPath = @"C:\Program Files (x86)\Hp\Unified Functional Testing\AddIns\ServiceTest\BasicActivities\toolbox_filewrite.png";
            _flow.FileWriteActivity57.Name = @"Write to File57";
            VTDPropertyInfoBase pi48 = new VTDPropertyInfoBase("OutputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrderResponse'][1]/*[local-name(.)='CreateFlightOrderResult'][1]/*[local-name(.)='OrderNumber'][1]");
            VTDBaseGetter binding_getter26 = new VTDXPathGetter(pi48,XmlTypeCode.Int);
            VTDPropertyInfoBase pi49 = new VTDPropertyInfoBase("Content");
            VTDBaseSetter binding_setter23 = new VTDObjectSetter(pi49);
            binding_setter23 = new StringFormaterDecorator(binding_setter23,"{Step.OutputProperties.StServiceCallActivity12.Body.CreateFlightOrderResponse.CreateFlightOrderResult.OrderNumber}");
            bind_dir23 = new BindDirection(_flow.StServiceCallActivity12,binding_getter26,binding_setter23,BindTargetType.ToInProperty);
            _flow.FileWriteActivity57.InDirections.Add(bind_dir23);
            _flow.FileWriteActivity57.BeforeExecuteStepEvent += _userCode.FileWriteActivity27_OnBeforeExecuteStepEvent;
            _flow.FileWriteActivity27.Content = @"{Step.InputProperties.ReportMessageActivity56.Message}";
            _flow.FileWriteActivity27.FilePath = @"C:\Users\Yogesh\Desktop\Message.txt";
            _flow.FileWriteActivity27.Mode = @"Append";
            _flow.FileWriteActivity27.Encoding = @"ASCII";
            _flow.FileWriteActivity27.AppendNewLine = true;
            _flow.FileWriteActivity27.Comment = @"";
            _flow.FileWriteActivity27.IconPath = @"C:\Program Files (x86)\Hp\Unified Functional Testing\AddIns\ServiceTest\BasicActivities\toolbox_filewrite.png";
            _flow.FileWriteActivity27.Name = @"Write to File27";
            VTDPropertyInfoBase pi50 = new VTDPropertyInfoBase("Message");
            VTDBaseGetter binding_getter27 = new VTDObjectGetter(pi50);
            VTDPropertyInfoBase pi51 = new VTDPropertyInfoBase("Content");
            VTDBaseSetter binding_setter24 = new VTDObjectSetter(pi51);
            binding_setter24 = new StringFormaterDecorator(binding_setter24,"{Step.InputProperties.ReportMessageActivity56.Message}");
            bind_dir24 = new BindDirection(_flow.ReportMessageActivity56,binding_getter27,binding_setter24,BindTargetType.ToInProperty);
            _flow.FileWriteActivity27.InDirections.Add(bind_dir24);
            _flow.FileWriteActivity27.BeforeExecuteStepEvent += _userCode.FileWriteActivity27_OnBeforeExecuteStepEvent;
            XmlDocument StServiceCallActivity20_InputEnvelope_Document = new XmlDocument();
            StServiceCallActivity20_InputEnvelope_Document.PreserveWhitespace = true;
            StServiceCallActivity20_InputEnvelope_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/""><Body><DeleteFlightOrder xmlns=""HP.SOAQ.SampleApp""><OrderNumber>{Step.InputProperties.StServiceCallActivity17.Body.GetFlightOrders.FlightsDetails.OrderNumber}</OrderNumber></DeleteFlightOrder></Body></Envelope>");
            _flow.StServiceCallActivity20.InputEnvelope = StServiceCallActivity20_InputEnvelope_Document;
            _flow.StServiceCallActivity20.Comment = @"";
            _flow.StServiceCallActivity20.IconPath = @"C:\Program Files (x86)\Hp\Unified Functional Testing\AddIns\ServiceTest\WSImportTechnology\ictb_service_operations_16.png";
            _flow.StServiceCallActivity20.Name = @"DeleteFlightOrder";
            _flow.StServiceCallActivity20.TransportProtocol.SOAPProperties.EndpointAddress = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity20.TransportProtocol.SOAPProperties.EndpointAddress}")) ? @"http://localhost:8000/HPFlights_SOAP" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity20.TransportProtocol.SOAPProperties.EndpointAddress}");
            _flow.StServiceCallActivity20.TransportProtocol.SOAPProperties.SoapAction = @"HP.SOAQ.SampleApp/IFlightsSoapService/DeleteFlightOrder";
            _flow.StServiceCallActivity20.TransportProtocol.SOAPProperties.ContentType = @"text/xml; charset=utf-8";
            _flow.StServiceCallActivity20.TransportProtocol.SOAPProperties.Timeout = (int)100000;
            _flow.StServiceCallActivity20.Service = @"HPFlights_Service";
            _flow.StServiceCallActivity20.Port = @"FlightsServiceMethods";
            _flow.StServiceCallActivity20.Operation = @"DeleteFlightOrder";
            _flow.StServiceCallActivity20.IsOneWay = false;
            _flow.StServiceCallActivity20.SendRequestToService=true;
            _flow.StServiceCallActivity20.FaultExpected=false;
            _flow.StServiceCallActivity20.IsAsync=false;
            _flow.StServiceCallActivity20.TargetNamespace=@"http://tempuri.org/";
            _flow.StServiceCallActivity20.ListenOnPort = (int)0;
            XmlDocument StServiceCallActivity20_ChannelBindingXml = new XmlDocument();
            StServiceCallActivity20_ChannelBindingXml.PreserveWhitespace = true;
            StServiceCallActivity20_ChannelBindingXml.LoadXml(@"<?xml version=""1.0""?>
            <ArrayOfChannelBindingBase xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">
              <ChannelBindingBase xsi:type=""HttpChannelBinding"">
                <IsKeepAlive>false</IsKeepAlive>
                <IsPreemptiveAuthentication>false</IsPreemptiveAuthentication>
                <ConnectionTimeout>0</ConnectionTimeout>
              </ChannelBindingBase>
            </ArrayOfChannelBindingBase>");
            _flow.StServiceCallActivity20.ChannelBindingXml = StServiceCallActivity20_ChannelBindingXml;
            VTDPropertyInfoBase pi52 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlightOrders'][1]/*[local-name(.)='FlightsDetails'][1]/*[local-name(.)='OrderNumber'][1]");
            VTDBaseGetter binding_getter28 = new VTDXPathGetter(pi52,XmlTypeCode.Int);
            VTDPropertyInfoBase pi53 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='DeleteFlightOrder'][1]/*[local-name(.)='OrderNumber'][1]");
            VTDBaseSetter binding_setter25 = new VTDXPathSetter(pi53,XmlTypeCode.Int);
            bind_dir25 = new BindDirection(_flow.StServiceCallActivity17,binding_getter28,binding_setter25,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity20.InDirections.Add(bind_dir25);
            XmlDocument StServiceCallActivity20_ExpectedOutputAttachments_Document = new XmlDocument();
            StServiceCallActivity20_ExpectedOutputAttachments_Document.PreserveWhitespace = true;
            StServiceCallActivity20_ExpectedOutputAttachments_Document.LoadXml(
@"<OutputAttachments />");
            _flow.StServiceCallActivity20.ExpectedOutputAttachments = StServiceCallActivity20_ExpectedOutputAttachments_Document;
            XmlDocument StServiceCallActivity20_ExpectedFaultProperties_Document = new XmlDocument();
            StServiceCallActivity20_ExpectedFaultProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity20_ExpectedFaultProperties_Document.LoadXml(
@"<tns:Envelope xmlns:tns=""http://schemas.xmlsoap.org/soap/envelope/""><tns:Body><tns:Fault><faultcode /><faultstring /></tns:Fault></tns:Body></tns:Envelope>");
            _flow.StServiceCallActivity20.ExpectedFaultProperties = StServiceCallActivity20_ExpectedFaultProperties_Document;
            XmlDocument StServiceCallActivity20_ExpectedOutputProperties_Document = new XmlDocument();
            StServiceCallActivity20_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity20_ExpectedOutputProperties_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/""><Body><DeleteFlightOrderResponse xmlns=""HP.SOAQ.SampleApp"" /></Body></Envelope>");
            _flow.StServiceCallActivity20.ExpectedOutputProperties = StServiceCallActivity20_ExpectedOutputProperties_Document;
            set_StServiceCallActivity20_checkpoints(_flow.StServiceCallActivity20);
            _flow.ReportMessageActivity43.Status = @"Done";
            _flow.ReportMessageActivity43.Message = @"Order number is deleted";
            _flow.ReportMessageActivity43.Destination = @"ReportAndOutput";
            _flow.ReportMessageActivity43.Comment = @"";
            _flow.ReportMessageActivity43.IconPath = @"C:\Program Files (x86)\Hp\Unified Functional Testing\AddIns\ServiceTest\BasicActivities\toolbox_report_message.png";
            _flow.ReportMessageActivity43.Name = @"Report Message43";
            _flow.FileWriteActivity44.Content = @"{Step.InputProperties.ReportMessageActivity43.Message}";
            _flow.FileWriteActivity44.FilePath = @"C:\Users\Yogesh\Desktop\Message.txt";
            _flow.FileWriteActivity44.Mode = @"Append";
            _flow.FileWriteActivity44.Encoding = @"ASCII";
            _flow.FileWriteActivity44.AppendNewLine = true;
            _flow.FileWriteActivity44.Comment = @"";
            _flow.FileWriteActivity44.IconPath = @"C:\Program Files (x86)\Hp\Unified Functional Testing\AddIns\ServiceTest\BasicActivities\toolbox_filewrite.png";
            _flow.FileWriteActivity44.Name = @"Write to File44";
            VTDPropertyInfoBase pi54 = new VTDPropertyInfoBase("Message");
            VTDBaseGetter binding_getter29 = new VTDObjectGetter(pi54);
            VTDPropertyInfoBase pi55 = new VTDPropertyInfoBase("Content");
            VTDBaseSetter binding_setter26 = new VTDObjectSetter(pi55);
            binding_setter26 = new StringFormaterDecorator(binding_setter26,"{Step.InputProperties.ReportMessageActivity43.Message}");
            bind_dir26 = new BindDirection(_flow.ReportMessageActivity43,binding_getter29,binding_setter26,BindTargetType.ToInProperty);
            _flow.FileWriteActivity44.InDirections.Add(bind_dir26);
            _flow.Break36.Comment = @"";
            _flow.Break36.IconPath = @"C:\Program Files (x86)\Hp\Unified Functional Testing\AddIns\ServiceTest\BasicActivities\toolbox_break_loop.png";
            _flow.Break36.Name = @"Break36";
            _flow.ReportMessageActivity51.Status = @"Fail";
            _flow.ReportMessageActivity51.Message = @"Order number is not deleted";
            _flow.ReportMessageActivity51.Destination = @"ReportAndOutput";
            _flow.ReportMessageActivity51.Comment = @"";
            _flow.ReportMessageActivity51.IconPath = @"C:\Program Files (x86)\Hp\Unified Functional Testing\AddIns\ServiceTest\BasicActivities\toolbox_report_message.png";
            _flow.ReportMessageActivity51.Name = @"Report Message51";
            _flow.FileWriteActivity50.Content = @"{Step.InputProperties.ReportMessageActivity51.Message}";
            _flow.FileWriteActivity50.FilePath = @"C:\Users\Yogesh\Desktop\Message.txt";
            _flow.FileWriteActivity50.Mode = @"Append";
            _flow.FileWriteActivity50.Encoding = @"ASCII";
            _flow.FileWriteActivity50.AppendNewLine = true;
            _flow.FileWriteActivity50.Comment = @"";
            _flow.FileWriteActivity50.IconPath = @"C:\Program Files (x86)\Hp\Unified Functional Testing\AddIns\ServiceTest\BasicActivities\toolbox_filewrite.png";
            _flow.FileWriteActivity50.Name = @"Write to File50";
            VTDPropertyInfoBase pi56 = new VTDPropertyInfoBase("Message");
            VTDBaseGetter binding_getter30 = new VTDObjectGetter(pi56);
            VTDPropertyInfoBase pi57 = new VTDPropertyInfoBase("Content");
            VTDBaseSetter binding_setter27 = new VTDObjectSetter(pi57);
            binding_setter27 = new StringFormaterDecorator(binding_setter27,"{Step.InputProperties.ReportMessageActivity51.Message}");
            bind_dir27 = new BindDirection(_flow.ReportMessageActivity51,binding_getter30,binding_setter27,BindTargetType.ToInProperty);
            _flow.FileWriteActivity50.InDirections.Add(bind_dir27);
            
        }
        
        internal void InitializeEncryptionManagerValues()
        {
        
        }
        	
    	bool useReport = true;
    
    	protected override STExecutionResult ExecuteStep()
        {
            return base.ExecuteStep();
        }
    
        public void Start()
        {
    	    try
    		{
    		  Workflow_Executing();
    		  this.ExecuteStep();
    		}
    		finally
    		{
    		  WorkFlowScript_Completed();
    		}
        }
    
    	private void InitReport()
    	{
    		if (useReport)
    		{	
    			// Intialize Reporter
    			string reportDBDir = Path.Combine(this._context.ReportDirectory, @"Report");
    			CleanupReport(reportDBDir);        	
    			string reportDBPath = Path.Combine(reportDBDir, "VTDReport.mdb");        	
    			if (reporter == null)
    			{
    				reporter = new Reporter(reportDBPath);
    			}
    			_context.Reporter = reporter;
    		}
    	}
    
        public static void CopyDirectory(string Src, string Dst)
        {
            String[] Files;
    
            if (Dst[Dst.Length - 1] != Path.DirectorySeparatorChar)
                Dst += Path.DirectorySeparatorChar;
            if (!Directory.Exists(Dst)) Directory.CreateDirectory(Dst);
            Files = Directory.GetFileSystemEntries(Src);
            foreach (string Element in Files)
            {
                // Sub directories
                if (Directory.Exists(Element))
                    CopyDirectory(Element, Dst + Path.GetFileName(Element));
                // Files in directory
                else
                    File.Copy(Element, Dst + Path.GetFileName(Element), true);
            }
        }
        
        private void CleanupReport(string reportDBDir)
        {   
    		if (useReport)
    		{             
    			string reportTemplateDir = Path.Combine(ServiceTestRunner.GetInstallPath(),@"bin\ReportResources");                
    			try
    			{
            		CopyDirectory(reportTemplateDir, reportDBDir);
    			}
    			catch //(Exception ex)
    			{
    				//ToDo: LoggingService.Warn("Report Cleanup Error", ex);
    			}
    		}
        }
    
        void Workflow_Executing()
        {   
        	InitReportNode();
                       
        }
    
    	private void InitReportNode()
    	{
    		if (useReport)
    		{	
        		// Init report creator
    			this.reportCreator = new HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator();
    			this.reportLevelInTree = reportCreator.Init(_context.EnvironmentProfile.GetVariableValue("TestName"), _context);
                
    			STActivityBase activity = this;
    			string workflowID = activity.GetHashCode().ToString();
    			ReportNodeCreationData newNodeData =
    			new ReportNodeCreationData(workflowID, workflowID, DateTime.Now);
    			reporter.CreateReportNode(newNodeData);
            
    			ReportInfoData newReportData = new ReportInfoData(workflowID, ReportKeywords.TypeKeywordTag, this.GetType().ToString());
    			reporter.SendReportData(newReportData);
    			newReportData = new ReportInfoData(workflowID, ReportKeywords.NameKeywordTag, this.Name);
    			//TrackData(ReportInfoData.InfoDataTag, newReportData);
    			reporter.SendReportData(newReportData);            
            }
    	}
        
        void WorkFlowScript_Completed()
        {   
    		
    
    		CreateReportFiles();
    					
        	// Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
    
    		OnExecutionCompleted();
    		
        }
    
    	private void CreateReportFiles()
    	{
    		if (useReport)
    		{	
    			//Dispose reporter inorder to close connection to report DB
           		this._context.Reporter.Dispose();
            	
           		// Run report creator
    			reportCreator.RunOnDBAndCreateFiles();
    		}
    	}
    
        
        void Workflow_Faulting()
        {
    		
    
    		CreateReportFiles();
            // Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
           
    		OnExecutionCompleted();
        }
    
    	protected override QcSystemVariables GetRuntimeQcVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeQcVariables(this._context);
    	}
            
    	protected override TestSystemVariables GetTestSystemVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeTestVariables(this._context);
    	}
    
    	private void UpdateTestSettings(ISTRunTimeContext ctx)
        {
    		ctx.PropertyBag["StopTestOnStepFailure"] = true;
    	}
    }
    
    public partial class VuserClass
    {
    	public static string[] CommandLineArguments;
    	public static string[] DotNetResolverPaths;
    	
        public VuserClass()
        {
    				
    		AssemblyResolver.AddSTPathsToResolutionPaths();
    		AssemblyResolver.AttachToAppdomain();
        }
    
        private void AddAssemblyResolver()
        {
    		AssemblyResolver.AddTestPathToResolutionPaths(GetTestPath());
    		AssemblyResolver.AddPathsForAssemblyResolution(DotNetResolverPaths);
        }
    	
        public int STAction()
        {	
            AddAssemblyResolver();
            STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
            WorkFlowScript script = new WorkFlowScript(ctx);
            script.InitializeComponent();
            script.Start();       
            
            return 0;
        }
        
        public void NotifyLicenseException(string msg)
        {
        		
    		try
    		{
    		    STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
                WorkFlowScript script = new WorkFlowScript(ctx);
                script.InitializeComponent();
                script.Context.ReplayClient.OnLicenseFailure(msg);
                
            }
            catch (Exception)
            {
    			// ToDo: log the error message
            }        
        }
    
    	 protected string GetTestPath()
            {
                if (CommandLineArguments != null)
                {
                    for (int i = 0; i < CommandLineArguments.Length; i++)
                    {
                        if (CommandLineArguments[i].Equals("-test", StringComparison.OrdinalIgnoreCase))
                        {
                            return CommandLineArguments[i + 1];
                        }
                    }
                }
                return String.Empty;
            }
        
    }
    
    }
    